package maxpower.manager;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelObject;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;

/**
 * A simple kernel which will send input data to each of its outputs in sequence.
 *
 * @author Chris Jones
 *
 * @param <T> data type
 */
public class RoundRobin<T extends KernelObject<T>> extends Kernel {
	public static final String INPUT_NAME = "din";
	public static final String OUTPUT_NAME_PREFIX = "dout";

	/**
	 * Create a {@code RoundRobin} kernel.
	 *
	 * @param parameters  kernel parameters
	 * @param wordType    input data word type
	 * @param nOutputs    number of output streams
	 * @param nWords      number of data words to send to an output before moving to next output
	 */
	public RoundRobin(KernelParameters parameters, KernelType<T> wordType, int nOutputs, int nWords) {
		super(parameters);

		CounterChain cc = control.count.makeCounterChain();
		DFEVar output = cc.addCounter(nOutputs, 1);
		if (nWords > 1) cc.addCounter(nWords, 1);

		T din = io.input(INPUT_NAME, wordType);

		for (int i = 0; i < nOutputs; ++i)
			io.output(OUTPUT_NAME_PREFIX+i, wordType, output === i) <== din;
	}

	/**
	 * Create a {@code RoundRobin} kernel with the specified {@code DFELink} connected to the input.
	 *
	 * @param <T> data type
	 * @param manager   manager containing the input stream
	 * @param name      name to give to {@code RoundRobin} kernel
	 * @param wordType  input data word type
	 * @param nOutputs  number of output streams
	 * @param nWords    number of data words to send to an output before moving to next output
	 * @param input     input stream
	 * @return {@code DFELink} array of {@code RoundRobin} outputs
	 */
	public static <T extends KernelObject<T>>
	DFELink[] roundRobin(CustomManager manager, String name, KernelType<T> wordType, int nOutputs, int nWords, DFELink input) {
		DFELink[] output = new DFELink[nOutputs];
		KernelBlock rr = manager.addKernel(new RoundRobin<T>(manager.makeKernelParameters(name), wordType, nOutputs, nWords));
		rr.getInput(INPUT_NAME) <== input;
		for (int i = 0; i < nOutputs; ++i) {
			output[i] = rr.getOutput(OUTPUT_NAME_PREFIX+i);
		}
		return output;
	}
}
