package maxpower.lmem.superfifo.test;

import maxpower.lmem.superfifo.SuperFIFO;
import maxpower.lmem.superfifo.SuperFIFO.FifoIO;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;
import com.maxeler.maxcompiler.v2.managers.DFEModel;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.DebugLevel;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControllerConfig;
import com.maxeler.maxeleros.ip.SlicePad.Padder;
import com.maxeler.maxeleros.managerblocks.StructUtils;
import com.maxeler.networking.statemachines.Flushing;
import com.maxeler.networking.v1.managers.NetworkManager;
import com.maxeler.utils.MemoryManager;

class SuperFifoTest extends NetworkManager {

	private static class DataGen extends Kernel {
		public static ConfigWordType configWordType = new ConfigWordType();
		public static class ConfigWordType extends DFEStructType {
			public ConfigWordType() {
				super(
					sft("base", dfeUInt(64)),
					sft("wordCount", dfeUInt(64))
				);
			}
		}

		protected DataGen(KernelParameters parameters, int wordWidthBits) {
			super(parameters);
			flush.disabled();


			NonBlockingInput<DFEStruct> configWordInput = io.nonBlockingInput("configWord", configWordType,
				constant.var(true),
				1, DelimiterMode.FRAME_LENGTH,
				Flushing.interFrameGapNone, NonBlockingMode.NO_TRICKLING);

			StructUtils.printDFEStructType(configWordType);

			DFEStruct configWord = configWordInput.data;
			DFEVar configWordValid = configWordInput.valid;

			DFEVar seenValid = Reductions.streamHold(constant.var(true), configWordValid);

			DFEVar configBase = Reductions.streamHold((DFEVar)configWord["base"], configWordValid);
			DFEVar configWordCount = Reductions.streamHold((DFEVar)configWord["wordCount"], configWordValid);

			DFEVar count = control.count.makeCounter(
				control.count.makeParams(64)
					.withReset(configWordValid)
					.withInitValue(0)
					.withMax(configWordCount)
					.withWrapMode(WrapMode.STOP_AT_MAX)
				).getCount();


			DFEVar dataOut = (count + configBase).cast(dfeUInt(wordWidthBits));
			DFEVar outNow = seenValid & (count < configWordCount);

			debug.simPrintf(outNow, "Pushing word %d / %d\n", count + 1, configWordCount);

			io.output("dataOut", dfeUInt(wordWidthBits), outNow) <== dataOut;
		}

	}

	private SuperFifoTest(boolean sim) {
		super(new EngineParameters("SuperFifoTestStallFix_" + (sim ? "SIM" : "HW"), DFEModel.ISCA,
				sim ? com.maxeler.maxcompiler.v2.build.EngineParameters.Target.DFE_SIM :
					com.maxeler.maxcompiler.v2.build.EngineParameters.Target.DFE));

		MemoryControllerConfig mcc = new MemoryControllerConfig();
		config.setOnCardMemoryFrequency(800);
		mcc.setMAX4qMode(true);
		mcc.setBurstSize(8);

		mcc.setEnableParityMode(true, true, 72, false);
		mcc.setEnableFlagCommands(true);
		config.setMemoryControllerConfig(mcc);

		config.setDefaultStreamClockFrequency(157);
		debug.setDebugLevel(new DebugLevel().setHasStreamStatus(true));

		int fifoWidth = 192;

		MemoryManager lmemOrganizer = new MemoryManager(this);

		FifoIO io = SuperFIFO.create(this, "superFifo", DFETypeFactory.dfeUInt(192), 1024*1024*1024L, lmemOrganizer);

		KernelBlock dataGen = addKernel(new DataGen(makeKernelParameters("dataGenKernel"), fifoWidth));

		dataGen.getInput("configWord") <== addStreamFromCPU("configWord");

		io.write <== dataGen.getOutput("dataOut");
		addStreamToCPU("read_fifo") <== Padder.padSource(this, io.read, 256);

		lmemOrganizer.log();
	}

	public static void main(String [] args) {
		boolean isSim = false;
		SuperFifoTest m = new SuperFifoTest(isSim);
		m.build();
	}
}
