package maxpower.blas.l3;

import java.util.ArrayList;
import java.util.List;

import maxpower.kernel.KernelBinaryOp.Add;
import maxpower.kernel.LargeStreamOffset;
import maxpower.kernel.TreeReduce;
import maxpower.kernel.arithmetic.FloatingPointMultiAdder;
import maxpower.kernel.arithmetic.FloatingPointMultiAdder.Optimization;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFloat;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;

/**
 * A tile accumulator for dense matrix multiplication.
 *
 * @author Chris Jones
 */
public class TileAccumulator extends KernelLib {
	private static final String LARGE_STREAM_OFFSET_NAME = "LargeStreamOffset";
	private static final int LARGE_STREAM_OFFSET_THRESHOLD = 25000; // very rough guess... LSO uses ~100 FMems

	private final int tileSize2D;
	private final DFEVar sumTiles;
	private final List<DFEVar> inputs;

	private DFEVar sum;
	private DFEVar sumValid;

	public TileAccumulator(int tileSize2D, DFEVar sumTiles, List<DFEVar> inputs) {
		super(inputs[0].getKernel());

		this.tileSize2D = tileSize2D;
		this.sumTiles   = sumTiles;
		this.inputs     = inputs;

		build();
	}

	private void build() {
		CounterChain cc = control.count.makeCounterChain();
		DFEVar tile = cc.addCounter(sumTiles, 1);
		cc.addCounter(tileSize2D, 1);

		sum = inputs[0].getType().newInstance(this);

		List<DFEVar> summands = new ArrayList<DFEVar>();
		summands.add((tile === 0) ? 0 : offset(sum, -tileSize2D));
		summands.addAll(inputs);

		if (sum.getType() instanceof DFEFloat) {
			FloatingPointMultiAdder adder =
				new FloatingPointMultiAdder(this, 1, false, Optimization.COND_ADD_SUB, Optimization.TRI_ADDER);
			sum <== adder.compute(summands);
		} else {
			sum <== TreeReduce.reduce(new Add<DFEVar>(), summands);
		}

		sumValid = (tile === (sumTiles-1));
	}

	private DFEVar offset(DFEVar value, int offset) {
		return (-offset >= LARGE_STREAM_OFFSET_THRESHOLD)
			? LargeStreamOffset.offset(LARGE_STREAM_OFFSET_NAME, value, offset)
			: stream.offset(value, offset);
	}

	public DFEVar getOutput() {
		return sum;
	}

	public DFEVar getOutputEnable() {
		return sumValid;
	}

	public static void connect(CustomManager manager, KernelBlock blk, int tileSize2D) {
		if (tileSize2D >= LARGE_STREAM_OFFSET_THRESHOLD)
			LargeStreamOffset.connect(manager, blk, LARGE_STREAM_OFFSET_NAME);
	}
}
