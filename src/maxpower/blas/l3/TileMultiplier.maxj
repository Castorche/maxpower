package maxpower.blas.l3;

import maxpower.kernel.KernelBinaryOp.Add;
import maxpower.kernel.TreeReduce;
import maxpower.kernel.arithmetic.FloatingPointMultiAdder;
import maxpower.kernel.arithmetic.FloatingPointMultiAdder.Optimization;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFloat;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

/**
 * A tile multiplier for use in dense matrix multiplication.
 *
 * NB. Supports only square tiles.
 *
 * @author Chris Jones
 */
public class TileMultiplier extends KernelLib {
	private final DFEVar output;

	/**
	 * Create a tile multiplier.
	 *
	 * @param N    size of tile in one dimension (tiles are NxN)
	 * @param aIn  A input matrix values
	 * @param bIn  B input matrix values
	 */
	public TileMultiplier(int N, DFEVar aIn, DFEVar bIn) {
		super(aIn.getKernel());

		CounterChain cc = control.count.makeCounterChain();
		DFEVar oddTile = cc.addCounter(2, 1); // counter will wrap, giving 0, 1, 0, 1, ...
		DFEVar i = cc.addCounter(N, 1);
		DFEVar j = cc.addCounter(N, 1);

		DFEVar[] summands = new DFEVar[N];

		for (int n = 0; n < N; ++n) {
			DFEVar a = Reductions.streamHold(stream.offset(aIn, +n), (j === 0));

			DFEType addrType = dfeUInt(MathUtils.bitsToAddress(2*N));
			DFEVar  wrAddr   = j.cast(addrType) + (oddTile ? constant.var(addrType, N) : 0);
			DFEVar  rdAddr   = j.cast(addrType) + (oddTile ? constant.var(addrType, 0) : N);

			// double buffer within a single memory
			Memory<DFEVar> bBuf = mem.alloc(bIn.getType(), 2*N);
			// write vertically; read horizontally
			bBuf.write(wrAddr, bIn, (i === n));

			// stream offset into future, so we can see entire tile within the buffer and read it transposed
			DFEVar b = stream.offset(bBuf.read(rdAddr), +N*N);
			optimization.pushPipeliningFactor(0.1);
			summands[n] = a * b;
			optimization.popPipeliningFactor();
		}

		if (aIn.getType() instanceof DFEFloat) {
			FloatingPointMultiAdder adder =
				new FloatingPointMultiAdder(this, 1, false, Optimization.COND_ADD_SUB, Optimization.TRI_ADDER);
			output = adder.compute(summands);
		} else {
			output = TreeReduce.reduce(new Add<DFEVar>(), summands);
		}
	}

	public DFEVar getOutput() {
		return output;
	}
}
