package maxpower.blas.l3;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;

public class TileMultiplierKernel extends Kernel {
	public static final String INPUT_A_NAME = "A";
	public static final String INPUT_B_NAME = "B";
	public static final String OUTPUT_NAME  = "C";

	public TileMultiplierKernel(KernelParameters parameters, DFEType type, int N) {
		super(parameters);

		DFEVar aIn = type.newInstance(this);
		DFEVar bIn = type.newInstance(this);

		TileMultiplier tm = new TileMultiplier(N, aIn, bIn);

		aIn <== io.input(INPUT_A_NAME, type);
		bIn <== io.input(INPUT_B_NAME, type);

		io.output(OUTPUT_NAME, type) <== tm.getOutput();
	}

	public static DFELink multiplyTiles(CustomManager manager, String name, DFEType type, int N, DFELink a, DFELink b) {
		KernelBlock block = manager.addKernel(new TileMultiplierKernel(manager.makeKernelParameters(name), type, N));
		block.getInput(INPUT_A_NAME) <== a;
		block.getInput(INPUT_B_NAME) <== b;
		return block.getOutput(OUTPUT_NAME);
	}
}
