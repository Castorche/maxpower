package maxpower.zerolatencymemory;

import static org.junit.Assert.assertArrayEquals;

import java.util.Random;

import org.junit.Test;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

public class ZeroLatencyMemoryTest {
	private static final int DEPTH = 4;

	private static class ZeroLatencyMemoryTestKernel extends Kernel {
		private static final DFEType TYPE = dfeUInt(32);

		ZeroLatencyMemoryTestKernel(KernelParameters parameters) {
			super(parameters);

			ZeroLatencyMemory<DFEVar> ram = ZeroLatencyMemory.alloc(this, TYPE, DEPTH);
			ram.mapToCPU("ZLMem");

			DFEVar readAddress  = io.input("readAddress",  dfeUInt(MathUtils.bitsToAddress(DEPTH)));
			DFEVar writeAddress = io.input("writeAddress", dfeUInt(MathUtils.bitsToAddress(DEPTH)));
			DFEVar writeEnable  = io.input("writeEnable",  dfeBool());
			DFEVar dataOut      = ram.read(readAddress);

			// data written is dependent on dataOut, but the calculation happens in a single cycle
			ram.write(writeAddress, dataOut + 1, writeEnable);

			io.output("dout", TYPE) <== dataOut;
		}
	}

	@Test
	public void testRandom() {
		final int N = 1000000;

		SimulationManager m = new SimulationManager("ZeroLatencyMemoryTest");
		m.setKernel(new ZeroLatencyMemoryTestKernel(m.makeKernelParameters()));
		m.setKernelCycles(N);

		for (int n = 0; n < DEPTH; ++n)
			m.setMappedRam("ZLMem", n, 0);

		long[] readAddress  = new long[N];
		long[] writeAddress = new long[N];
		long[] writeEnable  = new long[N];
		long[] expected     = new long[N];
		long[] value        = new long[DEPTH];

		long seed = System.currentTimeMillis();
		m.logMsg("Using random seed: %d", seed);
		Random rng = new Random(seed);

		for (int n = 0; n < N; ++n) {
			readAddress[n]  = rng.nextInt(DEPTH);
			writeAddress[n] = rng.nextInt(DEPTH);
			expected[n]     = value[(int) readAddress[n]];

			if (rng.nextBoolean()) {
				value[(int) writeAddress[n]] = expected[n] + 1;
				writeEnable[n] = 1;
			} else {
				writeEnable[n] = 0;
			}
		}

		m.setInputDataLong("readAddress",  readAddress);
		m.setInputDataLong("writeAddress", writeAddress);
		m.setInputDataLong("writeEnable",  writeEnable);
		m.runTest();

		assertArrayEquals(expected, m.getOutputDataLongArray("dout"));
	}
}
