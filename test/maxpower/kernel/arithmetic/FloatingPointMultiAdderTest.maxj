package maxpower.kernel.arithmetic;

import static com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory.dfeFloat;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFloat;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;
import com.maxeler.maxcompiler.v2.utils.Bits;

public class FloatingPointMultiAdderTest {
	private static final int N = 100; // length of test input data

	static class FPMATestKernel extends Kernel {
		protected FPMATestKernel(KernelParameters parameters, DFEFloat type, int numOperands, int numGuardBits) {
			super(parameters);

			DFEVectorType<DFEVar> arrayType = new DFEVectorType<DFEVar>(type, numOperands);
			DFEVector<DFEVar> input = io.input("input", arrayType);

			io.output("fpma_out", type) <== FloatingPointMultiAdder.add(numGuardBits, input.getElementsAsList());
		}
	}

	@Test
	public void testFloat7_7_13() {
		runTest(dfeFloat(7, 7), 13, 13);
	}

	@Test
	public void testFloat7_7_17() {
		runTest(dfeFloat(7, 7), 17, 13);
	}

	@Test
	public void testSingle_23() {
		runTest(dfeFloat(8, 24), 17, 13);
	}

	@Test
	public void testDouble_47() {
		runTest(dfeFloat(11, 53), 47, 13);
	}

	private void runTest(DFEFloat type, int numOperands, int numGuardBits) {
		SimulationManager m = new SimulationManager("FloatingPointMultiAdderTest");
		m.setKernel(new FPMATestKernel(m.makeKernelParameters(), type, numOperands, numGuardBits));

		List<Double> elements = new ArrayList<Double>();

		for (int i = 0; i < N; i++) {
			elements.add((double) i);
			elements.add((double)-i);
			if (i != 0)
				elements.add(1.0 / i);
		}

		// add all values with single bit set
		for (int i = 0; i < type.getTotalBits(); i++) {
			Bits bits = Bits.allZeros(type.getTotalBits());
			bits.setBit(i, 1);

			elements.add(type.decodeConstant(bits));
		}

		// add all values with two bits set
		for (int i = 0; i < type.getTotalBits(); i++) {
			for (int j = 0; j < type.getTotalBits(); j++) {
				Bits bits = Bits.allZeros(type.getTotalBits());
				bits.setBit(i, 1);
				bits.setBit(j, 1);

				elements.add(type.decodeConstant(bits));
			}
		}

		int numElements = elements.size();
		int numCycles   = numElements * numElements;

		Bits[]   input    = new Bits[numCycles];
		double[] expected = new double[numCycles];
		double[] maxAbs   = new double[numCycles];

		DFEVectorType<DFEVar> arrayType = new DFEVectorType<DFEVar>(type, numOperands);

		int idx = 0;
		for (int i = 0; i < numElements; i++) {
			for (int j = 0; j < numElements; j++, idx++) {
				double[] operands = new double[numOperands];

				operands[0] = elements[i];
				operands[1] = elements[j];
				for (int k = 2; k < numOperands; k++) {
					operands[k] = elements[(i+k-1)%numElements];
				}
				input[idx] = arrayType.encodeConstant(operands);

				expected[idx] = 0;
				maxAbs[idx]   = Double.MIN_NORMAL;
				for (int k = 0; k < numOperands; k++) {
					expected[idx] += operands[k];
					maxAbs[idx]    = Math.max(maxAbs[idx], Math.abs(operands[k]));
				}

				// handle expected values which are not encodable with our float type
				try {
					double d = type.decodeConstant(type.encodeConstant(expected[idx]));
					if (d == 0) {
						expected[idx] = 0;
					}
				} catch (Throwable t) {}
			}
		}

		m.setInputDataRaw("input", input);
		m.setKernelCycles(numCycles);
		m.runTest();

		double[] actual = m.getOutputDataArray("fpma_out");

		for (int i = 0; i < numCycles; i++) {
			myAssertEquals(i, expected[i] , actual[i], maxAbs[i], 2.0 / (1 << type.getMantissaBits()));
		}
	}

	private static void myAssertEquals(int idx, double expected, double actual, double maxAbs, double errorThreshold) {
		double absDiff = Math.abs(expected - actual);
		double relDiff = absDiff / Math.max(maxAbs, expected);

		String msgOnError =
			String.format("idx = %d, expected = %f, actual = %f, absDiff = %f, relDiff = %f, maxAbs = %f",
					idx, expected, actual , absDiff, relDiff, maxAbs);
		assertTrue(msgOnError, relDiff <= errorThreshold);
	}
}
