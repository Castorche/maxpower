package maxpower.kernel.arithmetic;

import static org.junit.Assert.assertArrayEquals;

import java.util.Random;

import org.junit.Test;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.RoundingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.managers.standard.SimulationManager;

/**
 * Test ConstDominator for a range of different denominators.
 *
 * All of the different denominators a built into the same kernel to reduce
 * the overhead of the simulation build.
 *
 * @author Chris Jones
 */
public class ConstDenominatorTest {
	private static final int N = 10000;

	// use a mix of different denominators, including those with power of 2 factors, which require a shift
	public static final int[] DENOMS = { 3, 5, 7, 9, 11, 13, 17, 21, 25, 31, 2, 4, 8, 64, 96, 192, 40, 80, 56 };

	private static class ConstDenominatorTestKernel extends Kernel {

		public ConstDenominatorTestKernel(KernelParameters parameters, int uintBits) {
			super(parameters);

			DFEType uintType = dfeUInt(uintBits);

			DFEVar input = io.input("input", uintType);
			DFEVar inDenom = io.scalarInput("denom", uintType);

			DFEVar result = constant.var(uintType, 0);
			for (int denom : DENOMS) {
				optimization.pushRoundingMode(RoundingMode.TRUNCATE);
				result = result + ((inDenom === denom) ? (input / (new ConstDenominator(denom))) : 0);
				optimization.popRoundingMode();
			}

			io.output("result", result, uintType);
		}
	}

	@Test
	public void testRandom() {
		double[] input    = new double[N];
		double[] expected = new double[N];

		SimulationManager m = new SimulationManager("ConstDenominatorTest");
		m.setKernel(new ConstDenominatorTestKernel(m.makeKernelParameters(), 32));
		m.build();

		long seed = System.currentTimeMillis();
		m.logMsg("Using random seed: %d", seed);
		Random rng = new Random(seed);

		for (int denom : DENOMS) {
			for (int i = 0; i < N; ++i) {
				input[i] = Math.abs(rng.nextInt());
				expected[i] = (((int) input[i]) / denom);
			}

			m.setKernelCycles(N);
			m.setScalarInput("denom", denom);
			m.setInputData("input", input);
			m.logMsg("Running test for denom = %s...\n", denom);
			m.run();

			double[] actual = m.getOutputDataArray("result");
			assertArrayEquals("denom_"+denom, expected, actual, 0);
		}
	}
}
